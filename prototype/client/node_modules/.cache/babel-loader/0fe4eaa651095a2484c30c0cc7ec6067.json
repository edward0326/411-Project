{"ast":null,"code":"var _jsxFileName = \"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlists(_ref) {\n  _s();\n\n  let {\n    artistName\n  } = _ref;\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [itunesPlaylists, setItunesPlaylists] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(`/api/playlists/${artistName}`);\n      const data = await response.json();\n      var tempData = data.body.tracks.items;\n      var tempPlaylists = [];\n\n      for (var i = 0; i < tempData.length; i++) {\n        var _tempData$i, _tempData$i$album;\n\n        const artists = (_tempData$i = tempData[i]) === null || _tempData$i === void 0 ? void 0 : (_tempData$i$album = _tempData$i.album) === null || _tempData$i$album === void 0 ? void 0 : _tempData$i$album.artists;\n\n        for (var j = 0; j < artists.length; j++) {\n          var _artists$j;\n\n          const currArtistName = (_artists$j = artists[j]) === null || _artists$j === void 0 ? void 0 : _artists$j.name.toLowerCase();\n\n          if (currArtistName.includes(artistName)) {\n            tempPlaylists.push(tempData[i]);\n            break;\n          }\n        }\n      }\n\n      console.log(tempPlaylists);\n      setSpotifyPlaylists(tempPlaylists);\n      fetch(`https://itunes.apple.com/search?term=${artistName}`).then(async res => {\n        try {\n          const data = await res.json();\n          setItunesPlaylists(data);\n          console.log('response data?', data);\n        } catch (error) {\n          console.error(error);\n        }\n      }).then(results => {\n        console.log(results);\n      }).catch(e => console.log(e));\n    }\n\n    fetchData();\n  }, [artistName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      m: 10,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          children: spotifyPlaylists.map(playlist => {\n            var _playlist$album, _playlist$album$image, _playlist$album2, _playlist$album3, _playlist$album3$arti;\n\n            return /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  alt: \"Remy Sharp\",\n                  src: playlist === null || playlist === void 0 ? void 0 : (_playlist$album = playlist.album) === null || _playlist$album === void 0 ? void 0 : (_playlist$album$image = _playlist$album.images[0]) === null || _playlist$album$image === void 0 ? void 0 : _playlist$album$image.url\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: playlist === null || playlist === void 0 ? void 0 : (_playlist$album2 = playlist.album) === null || _playlist$album2 === void 0 ? void 0 : _playlist$album2.name,\n                secondary: playlist === null || playlist === void 0 ? void 0 : (_playlist$album3 = playlist.album) === null || _playlist$album3 === void 0 ? void 0 : (_playlist$album3$arti = _playlist$album3.artists[0]) === null || _playlist$album3$arti === void 0 ? void 0 : _playlist$album3$arti.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(spotifyPlaylists)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Playlists, \"lj7Tj3VfLIYkbzomK5L2jHrIhZg=\");\n\n_c = Playlists;\nexport default Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"sources":["/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js"],"names":["React","useState","useEffect","Grid","Typography","Box","List","ListItem","ListItemText","ListItemAvatar","Avatar","Playlists","artistName","spotifyPlaylists","setSpotifyPlaylists","itunesPlaylists","setItunesPlaylists","fetchData","response","fetch","data","json","tempData","body","tracks","items","tempPlaylists","i","length","artists","album","j","currArtistName","name","toLowerCase","includes","push","console","log","then","res","error","results","catch","e","map","playlist","images","url","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar} from '@material-ui/core';\n\nfunction Playlists({artistName}) {\n    const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n    const [itunesPlaylists, setItunesPlaylists] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() { \n            const response = await fetch(`/api/playlists/${artistName}`)\n            const data = await response.json()\n            var tempData = data.body.tracks.items\n            var tempPlaylists = []\n            for (var i = 0; i < tempData.length; i++) {\n                const artists = tempData[i]?.album?.artists\n                for (var j = 0; j < artists.length; j++) {\n                    const currArtistName = artists[j]?.name.toLowerCase()\n                    if (currArtistName.includes(artistName)) {\n                        tempPlaylists.push(tempData[i])\n                        break;\n                    }\n                }\n            }\n            console.log(tempPlaylists)\n            setSpotifyPlaylists(tempPlaylists)\n\n            fetch(`https://itunes.apple.com/search?term=${artistName}`)\n                .then( async res => {\n                    try {\n                        const data = await res.json()\n                        setItunesPlaylists(data)\n                        console.log('response data?', data)\n                    } catch(error) {\n                        console.error(error)\n                    }\n                }).then((results) => {\n                    console.log(results)\n                }).catch(e => console.log(e));\n        }\n        fetchData()\n    }, [artistName])\n\n    return (\n        <div>\n            <Box m={10}>\n                <Grid item xs={12}>\n                    <List dense={true}>\n                        {spotifyPlaylists.map((playlist) => {\n                            return (\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\" src={playlist?.album?.images[0]?.url} />\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={playlist?.album?.name}\n                                        secondary={playlist?.album?.artists[0]?.name}\n                                    />\n                                </ListItem>)\n                        })\n                    }\n                    </List>\n                </Grid>\n            </Box>\n            <p>{ JSON.stringify(spotifyPlaylists) }</p>\n        </div>\n    );\n}\n\nexport default Playlists;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar } from '@material-ui/core';\nimport Navbar from \"./Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlists(_ref) {\n  _s();\n\n  let {\n    artistName\n  } = _ref;\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [itunesPlaylists, setItunesPlaylists] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      // fetch Spotify tracks\n      // const response = await fetch(`/api/playlists/${artistName}`)\n      // const data = await response.json()\n      // var tempData = data.body.tracks.items\n      // var tempPlaylists = []\n      // for (var i = 0; i < tempData.length; i++) {\n      //     const artists = tempData[i]?.album?.artists\n      //     for (var j = 0; j < artists.length; j++) {\n      //         const currArtistName = artists[j]?.name.toLowerCase()\n      //         if (currArtistName.includes(artistName)) {\n      //             tempPlaylists.push(tempData[i])\n      //             break;\n      //         }\n      //     }\n      // }\n      // console.log(tempPlaylists)\n      // setSpotifyPlaylists(tempPlaylists)\n      // fetch iTunes tracks\n      fetch(`https://itunes.apple.com/search?term=${artistName}`).then(async res => {\n        try {\n          const data = await res.json();\n          setItunesPlaylists(data.results);\n          console.log('response data?', data.results);\n        } catch (error) {\n          console.error(error);\n        }\n      }).catch(e => console.log(e));\n    }\n\n    fetchData();\n  }, [artistName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      m: 10,\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            align: \"center\",\n            children: \"Spotify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            dense: true,\n            children: spotifyPlaylists.map(playlist => {\n              var _playlist$album, _playlist$album$image, _playlist$album2, _playlist$album3, _playlist$album3$arti;\n\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    alt: \"Remy Sharp\",\n                    src: playlist === null || playlist === void 0 ? void 0 : (_playlist$album = playlist.album) === null || _playlist$album === void 0 ? void 0 : (_playlist$album$image = _playlist$album.images[0]) === null || _playlist$album$image === void 0 ? void 0 : _playlist$album$image.url\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: playlist === null || playlist === void 0 ? void 0 : (_playlist$album2 = playlist.album) === null || _playlist$album2 === void 0 ? void 0 : _playlist$album2.name,\n                  secondary: playlist === null || playlist === void 0 ? void 0 : (_playlist$album3 = playlist.album) === null || _playlist$album3 === void 0 ? void 0 : (_playlist$album3$arti = _playlist$album3.artists[0]) === null || _playlist$album3$arti === void 0 ? void 0 : _playlist$album3$arti.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            align: \"center\",\n            children: \"iTunes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            dense: true,\n            children: itunesPlaylists.map(playlist => {\n              return /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                  children: /*#__PURE__*/_jsxDEV(Avatar, {\n                    alt: \"Remy Sharp\",\n                    src: playlist === null || playlist === void 0 ? void 0 : playlist.artworkUrl100\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: playlist === null || playlist === void 0 ? void 0 : playlist.trackName,\n                  secondary: playlist === null || playlist === void 0 ? void 0 : playlist.artistName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(spotifyPlaylists)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Playlists, \"lj7Tj3VfLIYkbzomK5L2jHrIhZg=\");\n\n_c = Playlists;\nexport default Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"sources":["/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js"],"names":["React","useState","useEffect","Grid","Typography","Box","List","ListItem","ListItemText","ListItemAvatar","Avatar","Navbar","Playlists","artistName","spotifyPlaylists","setSpotifyPlaylists","itunesPlaylists","setItunesPlaylists","fetchData","fetch","then","res","data","json","results","console","log","error","catch","e","map","playlist","album","images","url","name","artists","artworkUrl100","trackName","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar} from '@material-ui/core';\nimport Navbar from \"./Navbar\";\n\nfunction Playlists({artistName}) {\n    const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n    const [itunesPlaylists, setItunesPlaylists] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n\n            // fetch Spotify tracks\n            // const response = await fetch(`/api/playlists/${artistName}`)\n            // const data = await response.json()\n            // var tempData = data.body.tracks.items\n            // var tempPlaylists = []\n            // for (var i = 0; i < tempData.length; i++) {\n            //     const artists = tempData[i]?.album?.artists\n            //     for (var j = 0; j < artists.length; j++) {\n            //         const currArtistName = artists[j]?.name.toLowerCase()\n            //         if (currArtistName.includes(artistName)) {\n            //             tempPlaylists.push(tempData[i])\n            //             break;\n            //         }\n            //     }\n            // }\n            // console.log(tempPlaylists)\n            // setSpotifyPlaylists(tempPlaylists)\n\n            // fetch iTunes tracks\n            fetch(`https://itunes.apple.com/search?term=${artistName}`)\n                .then( async res => {\n                    try {\n                        const data = await res.json()\n                        setItunesPlaylists(data.results)\n                        console.log('response data?', data.results)\n                    } catch(error) {\n                        console.error(error)\n                    }\n                }).catch(e => console.log(e));\n        }\n        fetchData()\n    }, [artistName])\n\n    return (\n        <div>\n            <Box m={10}>\n            <Navbar/>\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <h2 align=\"center\">Spotify</h2>\n                    <List dense={true}>\n                        {spotifyPlaylists.map((playlist) => {\n                            return (\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\" src={playlist?.album?.images[0]?.url} />\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={playlist?.album?.name}\n                                        secondary={playlist?.album?.artists[0]?.name}\n                                    />\n                                </ListItem>)\n                            })\n                        }\n                    </List>\n                </Grid>\n                <Grid item xs={4}>\n                    <h2 align=\"center\">iTunes</h2>\n                    <List dense={true}>\n                        {itunesPlaylists.map((playlist) => {\n                            return (\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\" src={playlist?.artworkUrl100} />\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={playlist?.trackName}\n                                        secondary={playlist?.artistName}\n                                    />\n                                </ListItem>)\n                            })\n                        }\n                    </List>\n                </Grid>\n            </Grid>\n                \n                \n            </Box>\n            <p>{ JSON.stringify(spotifyPlaylists) }</p>\n        </div>\n    );\n}\n\nexport default Playlists;\n"]},"metadata":{},"sourceType":"module"}
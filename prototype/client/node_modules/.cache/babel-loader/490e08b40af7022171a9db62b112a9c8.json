{"ast":null,"code":"var _jsxFileName = \"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlists(_ref) {\n  _s();\n\n  let {\n    artistName\n  } = _ref;\n  const [playlists, setPlaylists] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      // const response = await fetch(`/api/playlists/${artistName}`)\n      fetch(`https://itunes.apple.com/search?term=hello`).then(res => {\n        res.json();\n      }).then(results => {\n        console.log(results);\n      }); // const data = await response.json()\n      // var tempData = data.body.tracks.items\n      // var tempPlaylists = []\n      // for (var i = 0; i < tempData.length; i++) {\n      //     const artists = tempData[i]?.album?.artists\n      //     for (var j = 0; j < artists.length; j++) {\n      //         const currArtistName = artists[j]?.name.toLowerCase()\n      //         if (currArtistName.includes(artistName)) {\n      //             tempPlaylists.push(tempData[i])\n      //             break;\n      //         }\n      //     }\n      // }\n      // console.log(tempPlaylists)\n      // setPlaylists(tempPlaylists)\n    }\n\n    fetchData();\n  }, [artistName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      m: 10,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          children: playlists.map(playlist => {\n            var _playlist$album, _playlist$album$image, _playlist$album2, _playlist$album3, _playlist$album3$arti;\n\n            return /*#__PURE__*/_jsxDEV(ListItem, {\n              children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  alt: \"Remy Sharp\",\n                  src: playlist === null || playlist === void 0 ? void 0 : (_playlist$album = playlist.album) === null || _playlist$album === void 0 ? void 0 : (_playlist$album$image = _playlist$album.images[0]) === null || _playlist$album$image === void 0 ? void 0 : _playlist$album$image.url\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: playlist === null || playlist === void 0 ? void 0 : (_playlist$album2 = playlist.album) === null || _playlist$album2 === void 0 ? void 0 : _playlist$album2.name,\n                secondary: playlist === null || playlist === void 0 ? void 0 : (_playlist$album3 = playlist.album) === null || _playlist$album3 === void 0 ? void 0 : (_playlist$album3$arti = _playlist$album3.artists[0]) === null || _playlist$album3$arti === void 0 ? void 0 : _playlist$album3$arti.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(playlists)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Playlists, \"/7UASZ0pXGZcrJioajU839hHwfM=\");\n\n_c = Playlists;\nexport default Playlists;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"sources":["/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js"],"names":["React","useState","useEffect","Grid","Typography","Box","List","ListItem","ListItemText","ListItemAvatar","Avatar","Playlists","artistName","playlists","setPlaylists","fetchData","fetch","then","res","json","results","console","log","map","playlist","album","images","url","name","artists","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,IAAR,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,QAArC,EAA+CC,YAA/C,EAA6DC,cAA7D,EAA6EC,MAA7E,QAA0F,mBAA1F;;;AAEA,SAASC,SAAT,OAAiC;AAAA;;AAAA,MAAd;AAACC,IAAAA;AAAD,GAAc;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA2B;AACvB;AACAC,MAAAA,KAAK,CAAE,4CAAF,CAAL,CACKC,IADL,CACWC,GAAD,IAAS;AACXA,QAAAA,GAAG,CAACC,IAAJ;AACH,OAHL,EAGOF,IAHP,CAGaG,OAAD,IAAa;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,OALL,EAFuB,CAQvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACDL,IAAAA,SAAS;AACZ,GA1BQ,EA0BN,CAACH,UAAD,CA1BM,CAAT;AA4BA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,CAAC,EAAE,EAAR;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,KAAK,EAAE,IAAb;AAAA,oBACKC,SAAS,CAACU,GAAV,CAAeC,QAAD,IAAc;AAAA;;AACzB,gCACI,QAAC,QAAD;AAAA,sCACI,QAAC,cAAD;AAAA,uCACI,QAAC,MAAD;AAAQ,kBAAA,GAAG,EAAC,YAAZ;AAAyB,kBAAA,GAAG,EAAEA,QAAF,aAAEA,QAAF,0CAAEA,QAAQ,CAAEC,KAAZ,6EAAE,gBAAiBC,MAAjB,CAAwB,CAAxB,CAAF,0DAAE,sBAA4BC;AAA1D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAII,QAAC,YAAD;AACI,gBAAA,OAAO,EAAEH,QAAF,aAAEA,QAAF,2CAAEA,QAAQ,CAAEC,KAAZ,qDAAE,iBAAiBG,IAD9B;AAEI,gBAAA,SAAS,EAAEJ,QAAF,aAAEA,QAAF,2CAAEA,QAAQ,CAAEC,KAAZ,8EAAE,iBAAiBI,OAAjB,CAAyB,CAAzB,CAAF,0DAAE,sBAA6BD;AAF5C;AAAA;AAAA;AAAA;AAAA,sBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ;AAUH,WAXA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAoBI;AAAA,gBAAKE,IAAI,CAACC,SAAL,CAAelB,SAAf;AAAL;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GAvDQF,S;;KAAAA,S;AAyDT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar} from '@material-ui/core';\n\nfunction Playlists({artistName}) {\n    const [playlists, setPlaylists] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() { \n            // const response = await fetch(`/api/playlists/${artistName}`)\n            fetch(`https://itunes.apple.com/search?term=hello`)\n                .then((res) => {\n                    res.json()\n                }).then((results) => {\n                  console.log(results)\n                });\n            // const data = await response.json()\n            // var tempData = data.body.tracks.items\n            // var tempPlaylists = []\n            // for (var i = 0; i < tempData.length; i++) {\n            //     const artists = tempData[i]?.album?.artists\n            //     for (var j = 0; j < artists.length; j++) {\n            //         const currArtistName = artists[j]?.name.toLowerCase()\n            //         if (currArtistName.includes(artistName)) {\n            //             tempPlaylists.push(tempData[i])\n            //             break;\n            //         }\n            //     }\n            // }\n            // console.log(tempPlaylists)\n            // setPlaylists(tempPlaylists)\n        }\n        fetchData()\n    }, [artistName])\n\n    return (\n        <div>\n            <Box m={10}>\n                <Grid item xs={12}>\n                    <List dense={true}>\n                        {playlists.map((playlist) => {\n                            return (\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\" src={playlist?.album?.images[0]?.url} />\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={playlist?.album?.name}\n                                        secondary={playlist?.album?.artists[0]?.name}\n                                    />\n                                </ListItem>)\n                        })\n                    }\n                    </List>\n                </Grid>\n            </Box>\n            <p>{ JSON.stringify(playlists) }</p>\n        </div>\n    );\n}\n\nexport default Playlists;\n"]},"metadata":{},"sourceType":"module"}
[{"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/index.js":"1","/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/reportWebVitals.js":"2","/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/App.js":"3","/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/SearchConcert.js":"4","/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js":"5"},{"size":500,"mtime":1636695339896,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1636695339897,"results":"8","hashOfConfig":"7"},{"size":341,"mtime":1636725504122,"results":"9","hashOfConfig":"7"},{"size":1320,"mtime":1636750848121,"results":"10","hashOfConfig":"7"},{"size":2089,"mtime":1636750968230,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ocl6x",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/index.js",[],"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/reportWebVitals.js",[],"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/App.js",[],"/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/SearchConcert.js",["24","25","26"],"import React, { useState } from \"react\";\nimport TextField from '@mui/material/TextField';\nimport DatePicker from '@mui/lab/DatePicker';\nimport {Grid, Button} from '@material-ui/core';\nimport Playlists from './Playlists'\n\nfunction SearchConcert() {\n    const [artistName, setArtistName] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [date, setDate] = useState(null);\n\n  return (\n    <div>\n        <Grid container direction=\"row\" spacing={1} justifyContent=\"center\" alignItems=\"center\" style={{marginTop:100}}>\n            <TextField id=\"outlined-basic\" label=\"Artist Name\" variant=\"outlined\" onChange={(event) => setArtistName(event.target.value.toLowerCase())} />\n            <TextField id=\"outlined-basic\" label=\"City\" variant=\"outlined\" onChange={(event) => setCity(event.target.value)}/>\n            <DatePicker\n                label=\"Concert Date\"\n                value={date}\n                onChange={(newDate) => {\n                    setDate(newDate);\n                }}\n                renderInput={(params) => <TextField {...params} />}\n            />\n        </Grid>\n        <h2 align=\"center\">Playlists</h2>\n        {artistName != \"\" ?\n            <Grid><Playlists artistName={artistName} /></Grid>\n            : <Grid></Grid>\n        }\n    </div>\n  );\n}\n\nexport default SearchConcert;\n","/Users/cicichen/Documents/GitHub/411-Project/prototype/client/src/components/Playlists.js",["27"],"import React, { useState, useEffect } from \"react\";\nimport {Grid, Typography, Box, List, ListItem, ListItemText, ListItemAvatar, Avatar} from '@material-ui/core';\n\nfunction Playlists({artistName}) {\n    const [playlists, setPlaylists] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() { \n            const response = await fetch(`/api/playlists/${artistName}`)\n            const data = await response.json()\n            var tempData = data.body.tracks.items\n            var tempPlaylists = []\n            for (var i = 0; i < tempData.length; i++) {\n                const artists = tempData[i]?.album?.artists\n                for (var j = 0; j < artists.length; j++) {\n                    const currArtistName = artists[j]?.name.toLowerCase()\n                    if (currArtistName.includes(artistName)) {\n                        tempPlaylists.push(tempData[i])\n                        break;\n                    }\n                }\n            }\n            console.log(tempPlaylists)\n            setPlaylists(tempPlaylists)\n        }\n        fetchData()\n    }, [artistName])\n\n    return (\n        <div>\n            <Box m={10}>\n                <Grid item xs={12}>\n                    <List dense={true}>\n                        {playlists.map((playlist) => {\n                            return (\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\" src={playlist?.album?.images[0]?.url} />\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={playlist?.album?.name}\n                                        secondary={playlist?.album?.artists[0]?.name}\n                                    />\n                                </ListItem>)\n                        })\n                    }\n                    </List>\n                </Grid>\n            </Box>\n            <p>{ JSON.stringify(playlists) }</p>\n        </div>\n    );\n}\n\nexport default Playlists;\n",{"ruleId":"28","severity":1,"message":"29","line":4,"column":15,"nodeType":"30","messageId":"31","endLine":4,"endColumn":21},{"ruleId":"28","severity":1,"message":"32","line":9,"column":12,"nodeType":"30","messageId":"31","endLine":9,"endColumn":16},{"ruleId":"33","severity":1,"message":"34","line":27,"column":21,"nodeType":"35","messageId":"36","endLine":27,"endColumn":23},{"ruleId":"28","severity":1,"message":"37","line":2,"column":15,"nodeType":"30","messageId":"31","endLine":2,"endColumn":25},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'city' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Typography' is defined but never used."]